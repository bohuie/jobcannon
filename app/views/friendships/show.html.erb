<!DOCTYPE html>
<meta charset="utf-8">
<script type="text/javascript" src="assets/javascripts/d3.js"></script>
<body onload = "formFix()">
  <div class = "row" id = "body-row" style = "padding: 0;">
    <div class = "col-md-12" id = "body-col" style = "padding: 0; vertical-align: top; height: 100%">
      <ul class="nav nav-tabs" id="myTab">
        <li class = "active"><a href="#friends" data-toggle="tab">Friends</a></li>
        <li><a href="#businesses" data-toggle="tab">Businesses</a></li>
        <li><a href="#both" data-toggle="tab">Friends and Businesses</a></li>
      </ul>
      <div class="tab-content">
        <div class="tab-pane fade in active content" id="friends" style = "width: 100%; height: 100%; margin: 0px; background: white; border: 1px solid #D0D0D0; border-top: 0px; border-top-left-radius: 0px; border-top-right-radius: 0px">
          <div id = "display" style = "width: 100%; height: 100%; border: 1px solid black; background: white">
            <div class = "row" id = "search-row" style = "padding: 0; height: 40px; position: relative; left: 5px;">
              <%= simple_form_for NetworkSearch.new, :html => { :id => "friendSearch" }, :controller => "NetworkSearch", :action => "create" , remote: true do |f| %>
                <div class = "col-md-4">
                  <%= f.text_field :query, :autocomplete => "off", :autofocus => true,  input_html: {style: "padding: 0px;"} %>
                  <%= f.input :qtype, collection: ["name", "skill", "interest", "employer", "following"], as: :radio_buttons, item_wrapper_class: 'inline', label: false %>
                </div>
                <%= f.hidden_field :user_id, :value => @user.user_id %>
                <%= f.hidden_field :networktype, :value => "friends" %>
              <% end %>
            </div> 
            <script>
            function formFix(){
              console.log("trying to fix it");
              $(".radio.inline").css( "margin-top", "0px" );
              $("#network_search_query").css( "margin-bottom", "0px" );
            }
            d3.selection.prototype.moveToFront = function() {
              return this.each(function(){
                this.parentNode.appendChild(this);
              });
            };
            var searches = 0;
            var links = <%= @friendships.to_s.html_safe %>
            var nodes = [];
            var linkedByIndex = {};
            links.forEach(function(link) {
              link.source = nodes[link.source] || (nodes[link.source] = {name: link.source, id: link.sourceid, skills: link.sourceskills, photo: link.sourcephoto,  email: link.sourceemail, references: link.sourcereferences, experiences: link.sourceexperiences, company: link.sourcecompany, flaggedjobs: link.sourceflaggedjobs, interests: link.sourceinterests, following: link.sourcefollowing, current: link.sourcecurrent});
              link.target = nodes[link.target] || (nodes[link.target] = {name: link.target, id: link.targetid, skills: link.targetskills, photo: link.targetphoto, email: link.targetemail, references: link.targetreferences, experiences: link.targetexperiences, company: link.targetcompany, interests: link.targetinterests, following: link.targetfollowing, current: link.targetcurrent});
              linkedByIndex[link.source.name + "," + link.target.name] = 1;
              linkedByIndex[link.target.name + "," + link.source.name] = 1;
            });
            var width = $('#body-col').width(),
                height = window.innerHeight-275;
            var svg0 = d3.select("#display").append("svg")
                .attr("width", 100)
                .attr("height", 60)
                .style("position", "relative")
                .style("left", width-600)
                .style("top", -40)
                .append("g");
            var svg = d3.select("#display").append("svg")
                .attr("width", width)
                .attr("height", height)
                .style("position", "relative")
                .style("top", -40)
                .call(d3.behavior.zoom().scaleExtent([0.4, 3]).on("zoom", friendzoom))
                .append("g");
            function friendzoom() {
              svg.attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")");
            }
            var force = d3.layout.force()
              .nodes(d3.values(nodes))
              .links(links)
              .size([width, height])
              .linkDistance(150)
              .charge(-2000)
              .friction(0.85)
              .on("tick", tick)
              .start();
            var link = svg.selectAll(".link")
                .data(force.links())
                .enter().append("line")
                .attr("class", "link");
            var node = svg.selectAll(".node")
                .data(force.nodes())
                .enter().append("g")
                .attr("class", "node")
                .on("click", Friendexpand)
                .call(force.drag);
            node.append("rect")
                .attr("x", -36)
                .attr("y", -12)
                .attr("width", 100)
                .attr("height", 25)
                .attr("rx", 5)
                .style("fill",function(d) { 
                  if(d.company)
                    return "#ABCDEF";
                  else{
                    return "#FEDCBA";
                  }
                });
            node.append("svg:image")
                .attr('x',-35)
                .attr('y',-11)
                .attr('width', 23)
                .attr('height', 23)
                .attr("xlink:href", function(d) { 
                  if(d.photo)
                    return d.photo;
                  else{
                    d.photo = "/assets/per.png";
                    return d.photo;
                  }
                });            
            node.append("rect")
                .attr("x", -36)
                .attr("y", -12)
                .attr("width", 25)
                .attr("height", 25)
                .attr("rx", 5);
            node.append("text")
                .attr("x", -5)
                .attr("y", 0)
                .attr("clip-path", "url(#clip1)")
                .text(function(d) { return d.name; });
              function tick() {
                link
                    .attr("x1", function(d) { return d.source.x; })
                    .attr("y1", function(d) { return d.source.y; })
                    .attr("x2", function(d) { return d.target.x; })
                    .attr("y2", function(d) { return d.target.y; });

                node
                    .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });
              }
              var color = "#FEDCBA"
              var selectedcolor = "#ABCDEF"
              var foundcolor = ["rgb(255, 128, 128) ", "rgb(128, 230, 128) ", "rgb(204, 128, 204) ", "rgb(153, 153, 255) "]; 
            </script>
          </div>
        </div>
        <div class="tab-pane fade content" id="businesses" style = "width: 100%; height: 100%; margin: 0px; background: white; border: 1px solid #D0D0D0; border-top: 0px; border-top-left-radius: 0px; border-top-right-radius: 0px">
          <div id = "busdisplay" style = "width: 100%; height: 100%; border: 1px solid black; background: white;">
            <div class = "row" id = "search-row" style = "padding: 0; height: 40px; position: relative; left: 5px;">
              <%= simple_form_for NetworkSearch.new, :html => { :id => "friendSearch" }, :controller => "NetworkSearch", :action => "create" , remote: true do |f| %>
                <div class = "col-md-4">
                  <%= f.text_field :query, :autocomplete => "off", :autofocus => true,  input_html: {style: "padding: 0px;"} %>
                  <%= f.input :qtype, collection: ["name", "skill", "interest", "employer", "following"], as: :radio_buttons, item_wrapper_class: 'inline', label: false %>
                </div>
                <%= f.hidden_field :user_id, :value => @user.user_id %>
                <%= f.hidden_field :networktype, :value => "friends" %>
              <% end %>
            </div> 
            <script>
            d3.selection.prototype.moveToFront = function() {
              return this.each(function(){
                this.parentNode.appendChild(this);
              });
            };
            var bussearches = 0;
            var buslinks = <%= @businesses.to_s.html_safe %>
            var busnodes = [];
            var linkedByIndex = {};
            buslinks.forEach(function(link) {
              link.source = busnodes[link.source] || (busnodes[link.source] = {name: link.source, id: link.sourceid, skills: link.sourceskills, photo: link.sourcephoto,  email: link.sourceemail, references: link.sourcereferences, experiences: link.sourceexperiences, company: link.sourcecompany, flaggedjobs: link.sourceflaggedjobs, interests: link.sourceinterests, following: link.sourcefollowing});
              link.target = busnodes[link.target] || (busnodes[link.target] = {name: link.target, id: link.targetid, skills: link.targetskills, photo: link.targetphoto, email: link.targetemail, references: link.targetreferences, experiences: link.targetexperiences, company: link.targetcompany, interests: link.targetinterests, following: link.targetfollowing});
              linkedByIndex[link.source.name + "," + link.target.name] = 1;
              linkedByIndex[link.target.name + "," + link.source.name] = 1;
            });
            var bussvg0 = d3.select("#busdisplay").append("svg")
                .attr("width", 100)
                .attr("height", 60)
                .style("position", "relative")
                .style("left", width-600)
                .style("top", -40)
                .append("g");
            var bussvg = d3.select("#busdisplay").append("svg")
                .attr("width", width)
                .attr("height", height)
                .style("position", "relative")
                .style("top", -40)
                .call(d3.behavior.zoom().scaleExtent([0.4, 3]).on("zoom", buszoom))
                .append("g");
                function buszoom() {
              bussvg.attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")");
            }
            var busforce = d3.layout.force()
              .nodes(d3.values(busnodes))
              .links(buslinks)
              .size([width, height])
              .linkDistance(150)
              .charge(-2000)
              .friction(0.85)
              .on("tick", bustick)
              .start();
            var buslink = bussvg.selectAll(".buslink")
                .data(busforce.links())
                .enter().append("line")
                .attr("class", "link");
            var busnode = bussvg.selectAll(".busnode")
                .data(busforce.nodes())
                .enter().append("g")
                .attr("class", "node")
                .on("click", Businessexpand)
                .call(busforce.drag);
            busnode.append("rect")
                .attr("x", -36)
                .attr("y", -12)
                .attr("width", 100)
                .attr("height", 25)
                .attr("rx", 5)
                .style("fill",function(d) { 
                  if(d.company)
                    return "#ABCDEF";
                  else{
                    return "#FEDCBA";
                  }
                });
            busnode.append("svg:image")
                .attr('x',-35)
                .attr('y',-11)
                .attr('width', 23)
                .attr('height', 23)
                .attr("xlink:href", function(d) { 
                  if(d.photo)
                    return d.photo;
                  else{
                    d.photo = "/assets/per.png";
                    return d.photo;
                  }
                });            
            busnode.append("rect")
                .attr("x", -36)
                .attr("y", -12)
                .attr("width", 25)
                .attr("height", 25)
                .attr("rx", 5);
            busnode.append("text")
                .attr("x", -5)
                .attr("y", 0)
                .attr("clip-path", "url(#clip1)")
                .text(function(d) { return d.name; });
            function bustick() {
              buslink
                  .attr("x1", function(d) { return d.source.x; })
                  .attr("y1", function(d) { return d.source.y; })
                  .attr("x2", function(d) { return d.target.x; })
                  .attr("y2", function(d) { return d.target.y; });

              busnode
                  .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });
            }
            </script>
          </div> 
        </div>
        <div class="tab-pane fade content" id="both" style = "width: 100%; height: 100%; margin: 0px; background: white; border: 1px solid #D0D0D0; border-top: 0px; border-top-left-radius: 0px; border-top-right-radius: 0px"> 
          <div id = "bothdisplay" style = "width: 100%; height: 100%; border: 1px solid black; background: white;">
            <div class = "row" id = "search-row" style = "padding: 0; height: 40px; position: relative; left: 5px; top: 5px">
              <%= simple_form_for NetworkSearch.new, :html => { :id => "bothSearch" }, :controller => "NetworkSearch", :action => "create" , remote: true do |f| %>
                <div class = "col-md-1" style = "width:15px;">
                  <%= f.input :qtype, collection: ["all", "name", "skill", "interest"], label: false, :autocomplete => "off", :autofocus => true, :input_html => {style: "display: inline; width: 15px;"} %>
                </div>
                <div class = "col-md-3" style = "padding-left: 0px; padding-right: 0px; padding-bottom: 0px; margin-bottom: 0px; height: 40px; display: inline;">
                  <%= f.text_field :query, :autocomplete => "off", :autofocus => true,  style: "display: inline;" %>
                </div>
                <%= f.hidden_field :user_id, :value => @user.user_id %>
                <%= f.hidden_field :networktype, :value => "both" %>
              <% end %>
            </div> 
            <script>
            d3.selection.prototype.moveToFront = function() {
              return this.each(function(){
                this.parentNode.appendChild(this);
              });
            };
            var bothsearches = 0;
            var bothlinks = <%= @businesses.to_s.html_safe %>
            var bothnodes = [];
            var linkedByIndex = {};
            bothlinks.forEach(function(link) {
              link.source = bothnodes[link.source] || (bothnodes[link.source] = {name: link.source, id: link.sourceid, skills: link.sourceskills, photo: link.sourcephoto,  email: link.sourceemail, references: link.sourcereferences, experiences: link.sourceexperiences, company: link.sourcecompany, flaggedjobs: link.sourceflaggedjobs, interests: link.sourceinterests, following: link.sourcefollowing});
              link.target = bothnodes[link.target] || (bothnodes[link.target] = {name: link.target, id: link.targetid, skills: link.targetskills, photo: link.targetphoto, email: link.targetemail, references: link.targetreferences, experiences: link.targetexperiences, company: link.targetcompany, interests: link.targetinterests, following: link.targetfollowing});
              linkedByIndex[link.source.name + "," + link.target.name] = 1;
              linkedByIndex[link.target.name + "," + link.source.name] = 1;
            });
            var bothsvg0 = d3.select("#bothdisplay").append("svg")
                .attr("width", 100)
                .attr("height", 38)
                .append("g");
            var bothsvg = d3.select("#bothdisplay").append("svg")
                .attr("width", width)
                .attr("height", height)
                .attr("x", -38)
                .call(d3.behavior.zoom().scaleExtent([0.4, 3]).on("zoom", bothzoom))
                .append("g");
                function bothzoom() {
              bothsvg.attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")");
            }
            var bothforce = d3.layout.force()
              .nodes(d3.values(bothnodes))
              .links(bothlinks)
              .size([width, height])
              .linkDistance(150)
              .charge(-2000)
              .friction(0.85)
              .on("tick", bothtick)
              .start();
            var bothlink = bothsvg.selectAll(".bothlink")
                .data(bothforce.links())
                .enter().append("line")
                .attr("class", "link");
            var bothnode = bothsvg.selectAll(".bothnode")
                .data(bothforce.nodes())
                .enter().append("g")
                .attr("class", "node")
                .on("click", Bothexpand)
                .call(bothforce.drag);
            bothnode.append("rect")
                .attr("x", -36)
                .attr("y", -12)
                .attr("width", 100)
                .attr("height", 25)
                .attr("rx", 5)
                .style("fill",function(d) { 
                  if(d.company)
                    return "#ABCDEF";
                  else{
                    return "#FEDCBA";
                  }
                });
            bothnode.append("svg:image")
                .attr('x',-35)
                .attr('y',-11)
                .attr('width', 23)
                .attr('height', 23)
                .attr("xlink:href", function(d) { 
                  if(d.photo)
                    return d.photo;
                  else{
                    d.photo = "/assets/per.png";
                    return d.photo;
                  }
                });            
            bothnode.append("rect")
                .attr("x", -36)
                .attr("y", -12)
                .attr("width", 25)
                .attr("height", 25)
                .attr("rx", 5);
            bothnode.append("text")
                .attr("x", -5)
                .attr("y", 0)
                .attr("clip-path", "url(#clip1)")
                .text(function(d) { return d.name; });
            function bothtick() {
              bothlink
                  .attr("x1", function(d) { return d.source.x; })
                  .attr("y1", function(d) { return d.source.y; })
                  .attr("x2", function(d) { return d.target.x; })
                  .attr("y2", function(d) { return d.target.y; });

              bothnode
                  .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });
            }
            </script>
        </div>
      </div>
    </div>
  </div>    
  <svg id="mySvg" width="0" height="0">
    <clipPath id="clip1">
        <rect x="-5" y="-12" width="65" height="90"/>
    </clipPath>
    <clipPath id="clip2">
        <rect x="16" y="-12" width="180" height="90"/>
    </clipPath>
    <clipPath id="clip3">
        <rect x="-30" y="-12" width="80" height="90"/>
    </clipPath>
  </svg>
</body>